package com.dreamsecurity.ca.business.group.service;

import java.io.IOException;
import java.util.Date;
import java.util.List;
import java.util.Map;

import javax.annotation.Resource;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpSession;

import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.dreamsecurity.ca.business.common.CommonConstants;
import com.dreamsecurity.ca.business.common.domain.Criteria;
import com.dreamsecurity.ca.business.group.dao.GroupDao;
import com.dreamsecurity.ca.business.group.vo.GroupVo;
import com.dreamsecurity.ca.business.group.vo.UserGroupVo;
import com.dreamsecurity.ca.business.login.common.LoginConstants;
import com.fasterxml.jackson.core.JsonParseException;
import com.fasterxml.jackson.databind.JsonMappingException;
import com.fasterxml.jackson.databind.ObjectMapper;

@Service
public class GroupService {
	
	@Resource
	private GroupDao dao; 
	
	@Transactional(rollbackFor={Exception.class})
	public void registerGroup( HttpServletRequest request ) throws JsonParseException, JsonMappingException, IOException {
		HttpSession session = request.getSession();
		ObjectMapper mapper = new ObjectMapper();
		GroupVo groupVo = mapper.readValue( request.getReader(), GroupVo.class ); 
		Date currnetDate = new Date();
		
		groupVo.setCreateDate( currnetDate );
		groupVo.setState( 0 );
		groupVo.setCreator( session.getAttribute( LoginConstants.SESSION_ID).toString() );
		
		dao.registerGroup( groupVo );
		
		UserGroupVo userGroupVo = new UserGroupVo();
		
		userGroupVo.setUserId( groupVo.getCreator() );
		userGroupVo.setGroupId( groupVo.getId() );
		userGroupVo.setJoinDate( currnetDate );
		userGroupVo.setUserAuthority( 0 );
		userGroupVo.setState( 0 );
		
		dao.addUserToGroup( userGroupVo );
	}
	
	public List<Map<String, Object>> showList( HttpServletRequest request, Criteria cri ) {
		List<Map<String,Object>> voMapList = dao.selectGroupList( cri );
		
		for ( Map<String, Object> voMap : voMapList ) {
			voMap.put( "createdate", CommonConstants.dateFormat.format( (Date)voMap.get( "createdate" ) ) );
		} 
		
		return voMapList;
	}
	
	public int showListCnt() {
		return dao.selectGrouplistCnt();
	}
	
	public List<UserGroupVo>showUserList( HttpServletRequest request ) throws JsonParseException, JsonMappingException, IOException {
		ObjectMapper mapper = new ObjectMapper();
		UserGroupVo userGroupVo = mapper.readValue( request.getReader(), UserGroupVo.class );

		return dao.selectUserGroupList( userGroupVo );
	}
	
	public void addUserToGroup( HttpServletRequest request ) throws JsonParseException, JsonMappingException, IOException {
		ObjectMapper mapper = new ObjectMapper();
		UserGroupVo userGroupVo = mapper.readValue( request.getReader(), UserGroupVo.class );
		
		userGroupVo.setUserId( request.getSession().getAttribute( LoginConstants.SESSION_ID ).toString() );
		userGroupVo.setJoinDate( new Date() );
		userGroupVo.setUserAuthority( 0 );
		userGroupVo.setState( 0 );
		
		dao.insertUserToGroup( userGroupVo );
	}
	
	public void removeUserToGroup( HttpServletRequest request ) throws JsonParseException, JsonMappingException, IOException {
		ObjectMapper mapper = new ObjectMapper();
		UserGroupVo userGroupVo = mapper.readValue( request.getReader(), UserGroupVo.class );
		
		userGroupVo.setUserId( request.getSession().getAttribute( LoginConstants.SESSION_ID ).toString() );
		
		dao.deleteUserToGroup( userGroupVo );
	}
}
