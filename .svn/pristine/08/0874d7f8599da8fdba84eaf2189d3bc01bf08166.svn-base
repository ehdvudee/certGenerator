package com.dreamsecurity.ca.business.admin.service;

import java.io.IOException;
import java.math.BigInteger;
import java.security.InvalidKeyException;
import java.security.KeyPair;
import java.security.KeyPairGenerator;
import java.security.NoSuchAlgorithmException;
import java.security.NoSuchProviderException;
import java.security.PrivateKey;
import java.security.SignatureException;
import java.security.cert.CertificateEncodingException;
import java.security.cert.CertificateException;
import java.security.cert.X509Certificate;
import java.security.spec.InvalidKeySpecException;
import java.util.Date;
import java.util.List;
import java.util.Map;

import javax.annotation.Resource;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpSession;

import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.dreamsecurity.ca.business.cert.common.CertConstants;
import com.dreamsecurity.ca.business.cert.dao.CertDao;
import com.dreamsecurity.ca.business.cert.vo.CertVo;
import com.dreamsecurity.ca.business.cert.vo.KeyVo;
import com.dreamsecurity.ca.business.common.CommonConstants;
import com.dreamsecurity.ca.business.common.domain.Criteria;
import com.dreamsecurity.ca.business.group.dao.GroupDao;
import com.dreamsecurity.ca.business.group.vo.GroupSolutionVo;
import com.dreamsecurity.ca.business.group.vo.GroupVo;
import com.dreamsecurity.ca.business.group.vo.UserGroupVo;
import com.dreamsecurity.ca.business.login.common.LoginConstants;
import com.dreamsecurity.ca.business.user.dao.UserDao;
import com.dreamsecurity.ca.business.user.vo.AppliedUserInfoVo;
import com.dreamsecurity.ca.business.user.vo.UserVo;
import com.dreamsecurity.ca.framework.cert.CaCertGenerator;
import com.dreamsecurity.ca.framework.cert.CertGeneratorFactory;
import com.dreamsecurity.ca.framework.cert.RootCertGenerator;
import com.dreamsecurity.ca.framework.init.CaSettings;
import com.dreamsecurity.ca.framework.utils.CaUtils;
import com.fasterxml.jackson.core.JsonParseException;
import com.fasterxml.jackson.databind.JsonMappingException;

import sun.security.x509.KeyIdentifier;

@Service
public class AdminService {
	
	@Resource
	private UserDao userDao;
	
	@Resource
	private GroupDao groupDao;
	
	@Resource 
	private CertDao certDao;
	
	@Transactional(rollbackFor={Exception.class})
	public void registerUser( HttpServletRequest request, int seqId ) throws JsonParseException, JsonMappingException, IOException, NoSuchAlgorithmException, IllegalAccessException, InvalidKeySpecException, InvalidKeyException, NumberFormatException, CertificateException, NoSuchProviderException, SignatureException {
		AppliedUserInfoVo appliedUserVo = userDao.selectAppliedUserInfoOne( seqId );
		
		if ( appliedUserVo.getGroupCreator() && appliedUserVo.getGroupId() ==0 ) {
			// 그룹장 트렌젝션
			UserVo userVo = addUser( appliedUserVo );
			
			insertMasterGroupInfo( appliedUserVo, userVo );
			
			CertVo certVo = new CertVo();
			KeyPairGenerator keyPairGenerator = KeyPairGenerator.getInstance( CertConstants.KEY_ALGORITHM );
			keyPairGenerator.initialize( 2048 );
			
			KeyPair caKeyPair = keyPairGenerator.generateKeyPair();
			String dn = new StringBuilder().append( "CN = " ).append( appliedUserVo.getDepartTeam() )
					.append( " OU = " ).append( appliedUserVo.getSolutionName() )
					.append( " O = " ).append( CaSettings.getInstance().get( "organization" ) )
					.append( " C = " ).append( CaSettings.getInstance().get( "country" ) ).toString();
						
			CertVo rootCaVo = certDao.selectRootCertAndKeyInfoOne(); 
			
			if ( rootCaVo == null ) 
				throw new IllegalAccessException( "RootCA is not found");
			
			certVo.setIssuer( rootCaVo.getSubject() );
			X509Certificate rootCert = CaUtils.bytesToX509Cert( rootCaVo.getFile() );
			PrivateKey rootPriKey = CaUtils.pkcs8bytesToPrivateKeyObj( rootCaVo.getKeyVo().getPrivateKey() );
			
			BigInteger serialNumber = BigInteger.valueOf( 1 );
			
			X509Certificate intermediateCa = CertGeneratorFactory.building()
					.subject( caKeyPair )
					.validity( Integer.parseInt( CaSettings.getInstance().get( "interCertValidity" ) ) )
					.algorithm( CertConstants.CERT_ALGORITHM )
					.issuer( rootPriKey )
					.issuerCert( rootCert )
					.dn( dn )
					.serialNumber( serialNumber )
					.type( CaCertGenerator.class )
					.build()
					.generateCertificate();
			
			HttpSession session = request.getSession();
			certVo.setSubject( session.getAttribute( LoginConstants.SESSION_ID ).toString() );
			
			certVo.setIssuer( rootCaVo.getSubject() );
			certVo.setOuType( appliedUserVo.getSolutionName() );

			certVo = setKeyAndCertVo( certVo, caKeyPair, serialNumber, intermediateCa );
			
			certDao.insertKeyInfo( certVo.getKeyVo() );
			certVo.setKeyId( certVo.getKeyVo().getId() );
			certDao.insertCertInfo( certVo );
			
		} else if ( !appliedUserVo.getGroupCreator() && appliedUserVo.getGroupId() > 0 ) {
			// 그룹원 트렌젝션
			UserVo userVo = addUser( appliedUserVo );

			UserGroupVo userGroupVo = new UserGroupVo();
			
			userGroupVo.setUserId( userVo.getId() );
			userGroupVo.setGroupId( appliedUserVo.getGroupId() );
			userGroupVo.setJoinDate( new Date() );
			userGroupVo.setUserAuthority( 2 );
			userGroupVo.setState( 0 );
			
			groupDao.addUserToGroup( userGroupVo );
			
		} else if ( !appliedUserVo.getGroupCreator() && appliedUserVo.getGroupId() == 0 ) {
			// 일반 트렌젝션			
			addUser( appliedUserVo );
		}
	}
	
	@Transactional(rollbackFor={Exception.class})
	public void registerRootCa( HttpServletRequest request ) throws IOException, IllegalAccessException, NoSuchAlgorithmException, InvalidKeyException, CertificateException, NoSuchProviderException, SignatureException {
		CertVo certVo = new CertVo();
		KeyPairGenerator keyPairGenerator = KeyPairGenerator.getInstance( CertConstants.KEY_ALGORITHM );
		keyPairGenerator.initialize( 2048 );
		
		KeyPair rootKeyPair = keyPairGenerator.generateKeyPair();
		String dn = new StringBuilder().append( "CN = " ).append( CaSettings.getInstance().get( "rootCaCn" ) )
				.append( " OU = " ).append( CaSettings.getInstance().get( "rootCaOrganizationUnit" ) )
				.append( " O = " ).append( CaSettings.getInstance().get( "organization" ) )
				.append( " C = " ).append( CaSettings.getInstance().get( "country" ) ).toString();
		
		if ( !certDao.hasRootCa() ) {
			throw new IllegalAccessException( "Server already has RootCA.");
		}
		
		BigInteger serialNumber = BigInteger.valueOf( certDao.selectCertSerialNumber( certVo ) + 1);
		
		X509Certificate rootCert = CertGeneratorFactory.building()
				.subject( rootKeyPair )
				.validity( Integer.parseInt( CaSettings.getInstance().get( "rootCertValidity" ) ) )
				.algorithm( CertConstants.CERT_ALGORITHM )
				.issuer( rootKeyPair.getPrivate() )
				.dn( dn )
				.serialNumber( serialNumber )
				.type( RootCertGenerator.class )
				.build()
				.generateCertificate();
	 	
		HttpSession session = request.getSession();
		certVo.setSubject( session.getAttribute( LoginConstants.SESSION_ID ).toString() );
		certVo.setIssuer( certVo.getSubject() );
		certVo.setOuType( CaSettings.getInstance().get( "rootCaOrganizationUnit" ) );
		certVo = setKeyAndCertVo( certVo, rootKeyPair, serialNumber, rootCert );
		
		certDao.insertKeyInfo( certVo.getKeyVo() );
		certVo.setKeyId( certVo.getKeyVo().getId() );
		certDao.insertCertInfo( certVo );
	}
	
	public List<Map<String, Object>> showAppliedUserList( HttpServletRequest request, Criteria cri ) {
		List<Map<String,Object>> voMapList = userDao.selectAppliedUserList( cri );
		
		for ( Map<String, Object> voMap : voMapList ) {
			voMap.put( "adddate", CommonConstants.dateFormat.format( (Date)voMap.get( "adddate" ) ) );
			
			boolean gCreator = (boolean) voMap.get("groupcreator");
			int groupId = (int) voMap.get( "groupid" );
			
			if ( gCreator && groupId == 0 ) {
				voMap.put( "reqtype", "그룹장" );
			} else if ( !gCreator &&  groupId > 0 ) {
				voMap.put( "reqtype", "그룹원" );
			} else if ( !gCreator && groupId == 0 ) {
				voMap.put( "reqtype", "일반" );
			}
		} 
		
		return voMapList;
	}
	
	public int showAppliedUserListCnt() {
		return userDao.selectAppliedUserListCnt();
	}

	private UserVo addUser( AppliedUserInfoVo appliedUserVo ) {
		UserVo userVo = new UserVo();
		
		userVo.setId( appliedUserVo.getUserId() );
		userVo.setName( appliedUserVo.getName() );
		userVo.setAddDate( new Date() );
		userVo.setDepartTeam( appliedUserVo.getDepartTeam() );
		userVo.setJobLevel( appliedUserVo.getJobLevel() );
		userVo.seteMail( appliedUserVo.geteMail() );
		userVo.setPassword( appliedUserVo.getPassword() );
		userVo.setState( 1 );
		
		appliedUserVo.setState( 1 );
		
		userDao.insertUser( userVo );
		userDao.updateAppliedUserState( appliedUserVo );
		
		return userVo;
	}
	
	private void insertMasterGroupInfo( AppliedUserInfoVo appliedUserVo, UserVo userVo ) {
		GroupVo groupVo = new GroupVo();
		
		groupVo.setName( appliedUserVo.getGroupName() );
		groupVo.setCreateDate( new Date() );
		groupVo.setCreator( appliedUserVo.getUserId() );
		groupVo.setState( 0 );
		groupVo.setDescription( appliedUserVo.getGroupDescription() );
		
		groupDao.registerGroup( groupVo );
		
		GroupSolutionVo groupSolutionVo = new GroupSolutionVo();
		
		groupSolutionVo.setGroupId( groupVo.getId() );
		groupSolutionVo.setSolutionName( appliedUserVo.getSolutionName() );
		
		groupDao.insertGroupSolution( groupSolutionVo );
		
		UserGroupVo userGroupVo = new UserGroupVo();
		
		userGroupVo.setUserId( userVo.getId() );
		userGroupVo.setGroupId( appliedUserVo.getGroupId() );
		userGroupVo.setJoinDate( new Date() );
		userGroupVo.setUserAuthority( 2 );
		userGroupVo.setState( 0 );
	}
	
	private CertVo setKeyAndCertVo( CertVo certVo, KeyPair keyPair, BigInteger serialNumber, X509Certificate cert ) throws CertificateEncodingException, IOException {
		KeyVo keyVo = setKeyVo( new KeyVo(), keyPair, cert );
		
		certVo.setSerialNumber( serialNumber.intValue() );
		certVo.setFile( cert.getEncoded() );
		certVo.setIssuingRequestDate( new Date() );
		certVo.setStartDate( cert.getNotBefore() );
		certVo.setEndDate( cert.getNotAfter() );
		certVo.setSubjectDn( cert.getSubjectDN().getName().getBytes() );
		certVo.setKeyVo( keyVo );
		
		return certVo;
	}
	
	private KeyVo setKeyVo( KeyVo vo, KeyPair keyPair, X509Certificate cert ) throws IOException {
		vo.setPrivateKey( keyPair.getPrivate().getEncoded() );
		vo.setPublicKey( keyPair.getPublic().getEncoded() );
		vo.setPublicKeyIdentifier( new KeyIdentifier( cert.getPublicKey() ).getIdentifier() );
		
		return vo;
	}
}